##################################Functions##################################################
 Methods are Defined inside the Classes and Functions can be declared Any where .
 Functions wont Operate on Objects 
 
 A simple Function / Function Syntax as follows 
 
 def abs (x:Double) = { 
	if (x >0) x else -x
 }
 
 def is the Keyword  and it is followed by the function Name 
 x is the input parameter and we declare x is an Double   in Java we write Double x in scala we wrie the quite Opposite 
 in here we dont specify the return type because return type is inferred... values are returned to the function call 
 in the aboe we didnt specify the Output data type since scala automatically infer the data type , as Double 
 
 if we declare the Function in the recursive manner we need to specify the data type  explicitly
 def fact(n:Int):Int ={
	if(i <=1) 1 
	else i*fact(i-1)
	}
	
 if we dont give the equals in the Function it will be treated as the unit Function in here it will only excute the expression and returns nothing/ unit 
 
 def border (s:String ) {
 val border = "--" * s.length+"--\n"
 println(border+ "|\n" + s + "|\n"
 }

 Named Default Arguments 
 
 while Creating the Function if we declare the Arguments with Parameters it will take that as the default parameter 
 
 def decorate (s: String , left:String ="[" ,right:String = "]") {
		left+ s +right + 
	}
decorate("hello")             //[Hello]
decorate("hello" , "@" ,"!")  //@Hello!
decorate("Hello" , "$" )     // $Hello]	



varargs

def sum(x:Int*) = {
	var result =0
	for( rg <- args ) result +=rg
	result
	}

sum(1,2,3,45)

if i put 
sum(1 to 10) 
it will throw some error inorder to overcome that we are using :_*

so sum ( 1to10 :_*) which will tell consider this as sequence of Something

we need this for recursive type of functions 

def sumrev ( x :Int*) = {
	if(x.length==0) 0
	else x.head + sumrev(x.tail :_*)
	}




get the Vowels from the String 

if we found a vowel give it back to me 


def vowelsyield(str:String) =
    for (x <-str if isvowel3(x) ) yield x

	this above  lines will do the trick for us 
IN JAVE/ SCALA  we have to use the below code 

def vowels(s:String) = {
  val str = s.toLowerCase()
  var result:String = " "
  for( x <- str)  {
    if (isvowel3(x) )
      result += x
  }
  result
}

 















if we are not specifying the left or right parameter values default parameters value will get executed as above 

named Arguments - while at the Time of Function call if we specify the values with the named Parameters we can call the Function irrespective of its position 

decorate( right = "#" ,left="$" ,s="Hello" )    // $Hello#

