Useful Links 
https://github.com/rklick-solutions/spark-tutorial/wiki/Spark-SQL
http://homepage.cs.latrobe.edu.au/zhe/ZhenHeSparkRDDAPIExamples.html#sortBy
read DATA from mysql directly to spark 
http://wpcertification.blogspot.in/
---------------------------------------------------------
Log 4J Implementation 
Step 1:- 
Update build.sbt with below log4j dependency
libraryDependencies += "log4j" % "log4j" % "1.2.14"

step 2:- 
create Log4j.properties file under src/main/resources and update as follows:

# Define the root logger with appender file
log = /tmp/log4j
log4j.rootLogger = DEBUG, FILE

# Define the file appender
log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.File=${log}/log.out

# Define the layout for file appender
log4j.appender.FILE.layout=org.apache.logs4j.PatternLayout
log4j.appender.FILE.layout.conversionPattern=%m%n
SBT run, can be seen in /tmp/log4j/log.out log

Step 3:- Can be used in code as follows:

import org.apache.log4j.Logger

object HelloWorld {
  val logger = Logger.getLogger(this.getClass.getName)
  def main(args: Array[String]): Unit = {
    logger.info("Logger : Welcome to log4j")
  }
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.io.PrintWriter;
class fileLevelOperations {
	val log = Logger.getLogger(this.getClass.getName)
	val fs = FileSystem.get(sc.hadoopConfiguration)
	def create(filePath:String)={
		try{
			fs.create( new Path(filepath))
			println("New File Created Sucessfully..")
			log.info("New File was Created Sucessfully")
			}catch {
				case e:Exception =>  { println("We are Getting the Exception While Creating the File"); log.info("We are Getting the Exception While Creating the File") }
				}
	}

	def readFile(filePath:String) ={
		fs.open(new Path(filePath))
		}
		
	def writeFile(filePath:String ,data:String )={
		val output = fs.open(new Path(filePath))
		val writer = new PrintWriter(output)
		writer.write(data)
		writer.write("\n")
		writer.close()
		println("Writer have been Closed")
		log.info("File Write was Created Sucessfully")
		
	}
	
	def createFolder(folderPath:String) = {
	val location = new Path(folderPath)
	if(!fs.exists(location)){
			println("Location is not available \n we are creating the Folder")
			fs.mkdirs(location)
			log.info("New Folder was Created Sucessfully")
		}
	}
	
	def removeFile(filePath:String) ={
		val location = new Path(filePath)
		if (!fs.exists(location)) println("File Is not available"
		else {
		
			fs.delete(location,true)}
			log.info("Files were deleted Sucessfully")
	}
	def copyFromLocalOperation(srcFilePath:String , destFilePath:String)= {
		fs.copyFromLocal(srcFilePath,destFilePath)
		println("File has been copied from local to the Cluster")
		log.info("File has been copied from local to the Cluster")
	}
	def copyToLocalOperation(srcFilePath:String , destFilePath:String)= {
		fs.copyToLocal(srcFilePath,destFilePath)
		println("File has been copied from Cluster to the Local")
		log.info("File has been copied from Cluster to the Local")
	}
	def setReplication ( filePath :String , num:Int) ={ 
		fs.setReplication(new path ( filePath) , num)
	}
	def getInfo(srcFilePath:String , methodName:String) = methodName match {
	
	case "getBlockSizes" |"getblocksizes" 		= {
													val block = fs.getBlockSizes(new Path(srcFilePath))
													println( " Block Informations is as of below \n "+ block)
												  }
	case "getDefaultBlockSize" = {
									val defBlock = fs.getDefaultBlockSize(new Path(srcFilepath))
									println( " Default Block Informations is as of below \n "+ defBlock )
								 }
	case "getFileChecksum"     = {
									val fileCheck = fs.getFileChecksum(new Path(srcFilepath))
									println( " File CheckSum \n "+ fileCheck )
								 }
								 
	case "getFileStatus"        = {
									val fileCheck = fs.getFileStatus(new Path(srcFilepath))
									println( " File CheckSum \n "+ fileCheck )
								   }
	case "getReplication"        = {
									val repFactor = fs.getReplication(new Path(srcFilepath))
									println( " File Replication Factor is  \n "+ repFactor )
								   }
	}
}


def operations (methodName:String, srcFilePath:String, destFilePath:String , fileExists:Boolean) = methodName match {

	case "CREATE" if fileExists == TRUE => fileLevelOperations.create(srcFilePath)
	case "Write" 						=> fileLevelOperations.create(srcFilePath,"Hi Welcome to the Programming Language")
	case "delete" 						=> fileLevelOperations.remove(srcFilepath)
	case "createNewFolder" 				=> fileLevelOperations.createFolder(srcFilepath)
	case "copyFromLocal" 				=> fileLevelOperations.copyFromLocalOperation(srcFilepath,destFilePath)
	case "copyToLocal" 					=> fileLevelOperations.copyToLocalOperation(srcFilepath,destFilePath)
	case "setReplication" 				=> fileLevelOperations.setReplication(srcFilepath,4)
	case "getInfo"                      => fileLevelOperations.getInfo(srcFilepath,"getBlockSizes")
	case _                              => println(" selected Operations are unavailable as of Now ")

}

